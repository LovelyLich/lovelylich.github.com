<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>机器学习 on 榕易的易</title>
    <link>http://www.lovelylich.top/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/</link>
    <description>Recent content in 机器学习 on 榕易的易</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 29 Dec 2018 12:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://www.lovelylich.top/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>数学角度看支持向量机</title>
      <link>http://www.lovelylich.top/posts/2018-12-29-math_thesis_of_svm/</link>
      <pubDate>Sat, 29 Dec 2018 12:00:00 +0000</pubDate>
      
      <guid>http://www.lovelylich.top/posts/2018-12-29-math_thesis_of_svm/</guid>
      <description>点到超平面的距离计算 SVM是基于超平面来分类，核心目标是寻找某个超平面，被分类的所有点，到该超平面的距离最大。
欧式空间中两点之间的距离 在欧几里得空间中，点 p =$(p_1, p_2,\ldots, p_n)$和 q =$(q_1, q_2,\ldots,q_n)$之间的欧氏距离为:
$$ \begin{aligned} d({\bf{p}},{\bf{q}})&amp;amp;=\sqrt{(p_1-q_1)^2+(p_2-q_2)^2+\cdots+(p_n-qn)^2}
&amp;amp;=\sqrt{\sum{i=1}^n(p_i-q_i)^2} \end{aligned} $$
由该定理可知，欧式空间中的点，都对应着一个从原点出发，终止于该点的向量，而该向量的长度即为该点到原点到距离：
$$ \lVert{\bf{p}}\rVert=\sqrt{p_1^2+p_2^2+\cdots+p_n^2} $$
欧式空间中点到超平面的距离 平面的一般方程式为：
$$ Ax+By+Cz+D=0 $$
其中n = (A, B, C)是平面的法向量，D是将平面平移到坐标原点所需距离（所以D=0时，平面过原点） 所以，对于计算任意点P=(x1, y1,z1)到该超平面的距离，其实是计算该点投影到法向量(A, B, C)上的值:
$$ d=\frac {\lvert Ax_1+By_1+Cz_1+D \rvert} {\sqrt{A^2+B^2+C^2}} $$
支持向量机的训练目标 所以，支持向量机是为了寻找某个超平面 Ax+By+Cz+D=0，使得所有点到该平面的距离最大。
凸集 引用自维基百科: &amp;gt;在点集拓扑学与欧几里得空间中，凸集（convex set）是一个点集合，其中每两点之间的直线点都落在该点集合中
凸集和非凸集合的几何表现：
   凸集 非凸集          凸函数定义 引用自维基百科定义: &amp;gt;凸函数是一个定义在某个向量空间的凸子集C（区间）上的实值函数，如果在其定义域C 上的任意两点x,y，以及$t \in [0,1]$，有: $f(tx+(1-t)y) \leq tf(x)+(1-t)f(y)$ 也就是说，一个函数是凸的当且仅当其上境图（在函数图像上方的点集）为一个凸集。</description>
    </item>
    
  </channel>
</rss>